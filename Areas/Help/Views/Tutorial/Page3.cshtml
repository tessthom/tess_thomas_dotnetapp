@model int

<div class="container px-3">
  <div class="container help-home p-3 p-md-5">
    <h2>Tutorial @Model: CRUD Operation Walkthrough</h2>

    <p>CRUD stands for Create, Read, Update, Delete - four basic operations that are critical to any web app that allows the user to enter and modify data. Let's talk through a high level overview of how to create a CRUD app that uses <var>Entity Framework Core</var> for database interactions.</p>

    <ol>
      <li><b>Create a Model:</b> A Model is a class that represents the data structure of your database entities, or tables. For example, a product listing for a bottle shop might have properties like <var>Id</var>, <var>Name</var>, <var>Spirit</var>, and <var>Price</var>. We'd define a Bottle class like so: 

<div class="code-block">
  <pre>
    <code>
      public class Bottle
      {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Spirit { get; set; }
        public decimal Price { get; set; }
      }
    </code>
  </pre>
</div>
      </li>

      <li><b>Create a DbContext:</b> This class manages the entity objects at run time, including populating them with data from the database and tracking changes to the data. It also defines the relationships between the entities. For example, a BottleShopDbContext might look like this:

<div class="code-block">
  <pre>
    <code>
      public class BottleContext : DbContext
      {
        public DbSet&lt;Bottle&gt; Bottles { get; set; }
      }
    </code>
  </pre>
</div>
    </li>

    <li>
      <b>Register the DbContext:</b> In the <var>Program.cs</var> file, add the following code to the <var>ConfigureServices</var> method:

<div class="code-block">
<pre>
  <code>
    services.AddDbContext&lt;BottleContext&gt;(options =>
      options.UseSqlServer(Configuration.GetConnectionString("BottleContext")));
  </code>
</pre>
</div>
    </li>

    <li><b>Create:</b> To create a new bottle, we then instantiate a new <var>Book</var> object and add it to the <var>Bottles</var> <code>DbSet</code>. Then we call <code>SaveChangesAsync</code> to save the changes to the database. For example:

<div class="code-block">
<pre>
  <code>
    Bottle bottle = new Bottle
    {
      <span class="text-body">// Id is automatically generated by the database</span>
      Name = "Laphroaig 10 Year",
      Spirit = "Scotch",
      Price = 49.99
    };

    context.Bottles.Add(bottle);
    context.SaveChanges();
  </code>
</pre>
</div>
    </li>

    <li><b>Read:</b> To read the data, we can query the <var>Bottles</var> <code>DbSet</code> and return the results. For example:

<div class="code-block">
<pre>
  <code>
    var bottle = context.Bottles.Find(id);
  </code>
</pre>
</div>
    </li>

    <li><b>Update:</b> To update a bottle, we can modify the properties of the Bottle object retrieved, and then call <code>SaveChangesAsync</code> to save the changes to the database. For example:

<div class="code-block">
<pre>
  <code>
    bottle.Price = 59.99;
    context.SaveChanges();
  </code>
</pre>
</div>
    </li>

    <li><b>Delete:</b> To delete a bottle, we remove it from the <var>Bottles</var> <code>DbSet</code> and then call <code>SaveChangesAsync</code> to save the changes to the database. For example:

<div class="code-block">
<pre>
  <code>
    context.Bottles.Remove(bottle);
    context.SaveChanges();
  </code>
</pre>
</div>
    </li>
    </ol>

    <p>*This is a basic example and you'll of course need to remember to validate data as needed and handle exceptions, too.</p>

    <div class="container d-flex justify-content-between">
      <a asp-asp-controller="Tutorial" asp-action="PrevTutorial" asp-route-id="@Model" class="btn btn-primary prev">Prev</a>
      <a asp-asp-controller="Tutorial" asp-action="NextTutorial" asp-route-id="@Model" class="btn btn-primary next">Next</a>
    </div>
  </div>
</div>